// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using Foundation;
using LinqToTwitter;
using System.Linq;
using UIKit;

namespace Smashtag
{
	public partial class TweetTableViewController : UITableViewController, IUITextFieldDelegate
	{
		public TweetTableViewController(IntPtr handle) : base(handle)
		{
		}

		List<List<Status>> _tweets = new List<List<Status>>();
		public List<List<Status>> Tweets
		{
			get { return _tweets; }
			set
			{
				_tweets = value;
				TableView.ReloadData();
			}
		}

		string _searchText;
		public string SearchText
		{
			get { return _searchText; }
			set
			{
				_searchText = value;
				//_tweets.RemoveAll
				SearchForTweets();
				Title = _searchText;
			}
		}

		SingleUserAuthorizer _auth;
		SingleUserAuthorizer Auth => _auth ?? (_auth = new SingleUserAuthorizer
		{
			CredentialStore = new SingleUserInMemoryCredentialStore
			{
				ConsumerKey = "zxEHIfGONE WITH THE WIND",
				ConsumerSecret = "TdXGONE WITH THE WINDZy89Y83YLd4OKwlaZgKjztumznCT",
				AccessToken = "898512GONE WITH THE WINDtEvpWg6aLPKQUOGBVTOgfD7Nr",
				AccessTokenSecret = "GONE WITH THE WIND4Vn2XT1swzhqixYMxZnc7KMkSV"
			}
		});

		void SearchForTweets()
		{


			var plist = NSUserDefaults.StandardUserDefaults;
			recentSearches.AddSearchTerm(SearchText);
			var saved = recentSearches.Get();
			plist.SetString(saved, (Foundation.NSString)OtherId.RecentSearches);
			plist.Synchronize();

			TwitterContext ctx = new TwitterContext(Auth);

			new System.Threading.Thread(new System.Threading.ThreadStart(() =>
			{
				var srch = (from search in ctx.Search
							where search.Type == SearchType.Search &&
							   search.Query == SearchText + "-filter:retweets" &&
							   search.Count == 100
							select search)
				.SingleOrDefault().Statuses;
				InvokeOnMainThread(() =>
				{
					_tweets.Insert(0, srch);
					TableView.ReloadData();
				});
			})).Start();
		}
		RecentSearches recentSearches;
		public override void ViewDidLoad()
		{
			base.ViewDidLoad();
			TableView.EstimatedRowHeight = TableView.RowHeight;
			TableView.RowHeight = UITableView.AutomaticDimension;

			// Get Shared User Defaults
			var plist = NSUserDefaults.StandardUserDefaults;

			var searches = plist.StringForKey(OtherId.RecentSearches);
			recentSearches = new RecentSearches();
			recentSearches.Load(searches);

			searchTextField.Delegate = this;
			searchTextField.Text = SearchText;
		}

		[Export("textFieldShouldReturn:")]
		public bool ShouldReturn(UITextField textField)
		{
			textField.ResignFirstResponder();
			SearchText = textField.Text;
			return true;
		}

		struct StoryboardId
		{
			public const string TweetCellIdentifier = "Tweet";
			public const string ViewTweetDetailSegue = "View Tweet Detail";
		}

		struct OtherId
		{
			public const string RecentSearches = "RecentSearches";
		}

		public override nint NumberOfSections(UITableView tableView)
		{
			return Tweets.Count;
		}

		public override nint RowsInSection(UITableView tableView, nint section)
		{
			return Tweets[(int)section].Count;
		}


		public override UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
		{
			var cell = TableView.DequeueReusableCell(StoryboardId.TweetCellIdentifier, indexPath) as TweetTableViewCell;

			if (cell != null)
			{
				cell.Tweet = Tweets[indexPath.Section][indexPath.Row];
			}

			return cell;
		}

		#region Segues

		Status _selectedTweet;

		public override void RowSelected(UITableView tableView, NSIndexPath indexPath)
		{
			_selectedTweet = Tweets[indexPath.Section][indexPath.Row];
			this.PerformSegue(StoryboardId.ViewTweetDetailSegue, tableView);
		}

		public override bool ShouldPerformSegue(string segueIdentifier, NSObject sender)
		{
			if (StoryboardId.ViewTweetDetailSegue.Equals(segueIdentifier))
			{
				return _selectedTweet != null;
			}
			return base.ShouldPerformSegue(segueIdentifier, sender);
		}

		public override void PrepareForSegue(UIStoryboardSegue segue, NSObject sender)
		{
			if (StoryboardId.ViewTweetDetailSegue.Equals(segue.Identifier))
			{
				var mdtvc = segue.DestinationViewController.ContentViewController() as MetaDataTableViewController;
				mdtvc.Tweet = _selectedTweet;
			}
			else
			{
				base.PrepareForSegue(segue, sender);
			}
		}
		#endregion
	}
}
