// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using Foundation;
using LinqToTwitter;
using System.Linq;
using UIKit;

namespace Smashtag
{
	public partial class MetaDataTableViewController : UITableViewController
	{
		List<TweetImage> _images = new List<TweetImage>();
		List<string> _mentions = new List<string>();
		List<string> _hashtags = new List<string>();
		List<TweetUrl> _urls = new List<TweetUrl>();
		Dictionary<int, string> _sections = new Dictionary<int, string>
		{
			{0, "Images"},
			{1, "Mentions"},
			{2, "Hashtags"},
			{3, "Links"},
		};

		struct StoryboardId
		{
			public const string BasicCellIdentifier = "Basic Info Cell";
			public const string ImageCellIdentifier = "Tweet Image Cell";
			public const string SearchAgainSegue = "Search Again";
			public const string ViewZoomedImageSegue = "View Zoomed Image";
		}
		public MetaDataTableViewController (IntPtr handle) : base (handle)
		{
		}

		public override void ViewDidLoad()
		{
			base.ViewDidLoad();

			//TableView.EstimatedRowHeight = TableView.RowHeight;
			TableView.RowHeight = UITableView.AutomaticDimension;
		}

		private Status _tweet;
		public Status Tweet
		{
			get { return _tweet; }
			set { _tweet = value; SetupUI();  }
		}

		void SetupUI()
		{
			Title = Tweet.User.ScreenNameResponse;
			_hashtags.Clear();
			_images.Clear();
			_mentions.Clear();
			_urls.Clear();

			var images = Tweet.ExtendedEntities
							  .MediaEntities
							  .Select(media =>
									  media
									  .Sizes
									  .Select(size =>
											  new TweetImage
											  {
												  Url = media.MediaUrl,
												  Height = size.Height,
												  Width = size.Width
											  }).First());

			_images.AddRange(images);

			_mentions.AddRange(
				Tweet.Entities.UserMentionEntities
				.Select(m => '@' + m.ScreenName));

			_hashtags.AddRange(
				Tweet.Entities.HashTagEntities
				.Select(m => '#' + m.Tag));

			_urls.AddRange(Tweet.Entities.UrlEntities.Select(x => new TweetUrl
			{
				DisplayUrl = x.DisplayUrl,
				RealUrl = x.ExpandedUrl
			}));

			TableView.ReloadData();
		}


		#region Table

		public override string TitleForHeader(UITableView tableView, nint section)
		{
			var header = "";
			switch (section)
			{
				case 0: // Images
					if (_images.Count > 0)
						header = _sections[0];
					break;
				case 1: // Mentions
					if (_mentions.Count > 0)
						header = _sections[1];
					break;
				case 2: // Hashtags
					if (_hashtags.Count > 0)
						header = _sections[2];
					break;
				case 3: // Urls
					if (_urls.Count > 0)
						header = _sections[3];
					break;
				default:
					break;
			}
			return header;
		}

		public override nint NumberOfSections(UITableView tableView)
		{
			return _sections.Count;
		}

		public override nint RowsInSection(UITableView tableView, nint section)
		{
			switch (section)
			{
				case 0: // Images
					return _images.Count;
				case 1: // Mentions
					return _mentions.Count;
				case 2: // Hashtags
					return _hashtags.Count;
				case 3: // Urls
					return _urls.Count;
				default:
					break;
			}
			return 0;
		}

		public override nfloat GetHeightForRow(UITableView tableView, NSIndexPath indexPath)
		{
			if (indexPath.Section == 0) // Images
			{
				var width = UIScreen.MainScreen.Bounds.Width;
				var image = _images[indexPath.Row];
				return ((nfloat)((decimal)image.Height / image.Width)) * width;
			}
			return TableView.RowHeight;
		}


		public override UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
		{
			int section = indexPath.Section;
			int row = indexPath.Row;
			UITableViewCell cell;

			if (section == 0)
			{
				var image = _images[row];
				var imageCell = TableView.DequeueReusableCell(StoryboardId.ImageCellIdentifier, indexPath) as TweetImageViewCell;
				imageCell.SetImage(image.Url);
				return imageCell;
			}
			else 
			{
				string value = "";
				cell = TableView.DequeueReusableCell(StoryboardId.BasicCellIdentifier, indexPath);
				if (section == 1)
					value = _mentions[row];
				else if (section == 2)
					value = _hashtags[row];
				else if (section == 3)
					value = _urls[row].DisplayUrl;
				
				cell.TextLabel.Text = value;
				return cell;
			}
		}
		#endregion

		#region Segues


		string _selectedValue;

		public override void RowSelected(UITableView tableView, NSIndexPath indexPath)
		{
			int row = indexPath.Row;
			int section = indexPath.Section;
			if (indexPath.Section == 0) // Image
			{
				_selectedValue = _images[row].Url;
				this.PerformSegue(StoryboardId.ViewZoomedImageSegue, tableView);
			}
			else if (indexPath.Section == 3) // links
			{
				UIApplication.SharedApplication.OpenUrl(new Uri(_urls[row].RealUrl));
			}
			else {

				if (section == 1)
					_selectedValue = _mentions[row];
				else if (section == 2)
					_selectedValue = _hashtags[row];
				this.PerformSegue(StoryboardId.SearchAgainSegue, tableView);
			}
		}

		public override bool ShouldPerformSegue(string segueIdentifier, NSObject sender)
		{
			if (StoryboardId.SearchAgainSegue.Equals(segueIdentifier))
			{
				return _selectedValue != null;
			}
			return base.ShouldPerformSegue(segueIdentifier, sender);
		}

		public override void PrepareForSegue(UIStoryboardSegue segue, NSObject sender)
		{
			if (StoryboardId.SearchAgainSegue.Equals(segue.Identifier))
			{
				var searchTweetsViewController = segue.DestinationViewController.ContentViewController() as TweetTableViewController;
				searchTweetsViewController.SearchText = _selectedValue;
			}
			else if (StoryboardId.ViewZoomedImageSegue.Equals(segue.Identifier))
			{
				var searchTweetsViewController = segue.DestinationViewController.ContentViewController() as ZoomedImageViewController;
				searchTweetsViewController.ImageURL = new Uri( _selectedValue);
			}
			else
			{
				base.PrepareForSegue(segue, sender);
			}
		}
		#endregion

		class TweetImage
		{
			public string Url { get; set; }
			public int Height { get; set; }
			public int Width { get; set; }
		}

		class TweetUrl
		{
			public string DisplayUrl { get; set; }
			public string RealUrl { get; set; }
		}

	}
}
