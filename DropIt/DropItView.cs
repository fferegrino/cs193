// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using CoreGraphics;
using System.Collections.Generic;

namespace DropIt
{
	public partial class DropItView : NamedBezierPathsView, IUIDynamicAnimatorDelegate
	{
		Random r = new Random();

		public DropItView (IntPtr handle) : base (handle)
		{
		}

		UIDynamicAnimator _animator;
		UIDynamicAnimator animator => _animator ?? (_animator = new UIDynamicAnimator(this) { Delegate = this });

		public void WillResume(UIDynamicAnimator animator)
		{
			//throw new NotImplementedException();
		}

		public void DidPause(UIDynamicAnimator animator)
		{
			RemoveCompletedRow();
		}

		FallingObjectBehavior dropBehavior = new FallingObjectBehavior();

		private bool _animating;
		public bool Animating
		{
			get { return _animating; }
			set { _animating = value;
				if (_animating)
				{
					animator.AddBehavior(dropBehavior);
				}
				else
				{
					animator.RemoveBehavior(dropBehavior);
				}
			}
		}

		private struct PathNames
		{
			public const string MiddleBarrier = "Middle Barrier";
		}

		public override void LayoutSubviews()
		{
			base.LayoutSubviews();
			var path = UIBezierPath.FromOval(new CGRect(new CGPoint(Bounds.GetMidX(), Bounds.GetMidY()), DropSize));
			dropBehavior.AddBarrier(path, PathNames.MiddleBarrier);
			BezierPaths = new Dictionary<string, UIBezierPath>
			{
				{PathNames.MiddleBarrier, path}
			};
		}

		void RemoveCompletedRow()
		{
			List<UIView> dropsToRemove = new List<UIView>();

			var hitTestRect = new CGRect(new CGPoint(Bounds.GetMinX(), Bounds.GetMaxY()), DropSize);
			do
			{
				hitTestRect.X = Bounds.GetMinX();
				hitTestRect.Y -= DropSize.Height;
				var dropsTested = 0;
				List<UIView> dropsFound = new List<UIView>();
				while (dropsTested < DropsPerRow)
				{
					var hitView = HitTest(new CGPoint(hitTestRect.GetMidX(), hitTestRect.GetMidY()), null);
					if (hitView.Superview == this)
					{
						dropsFound.Add(hitView);
					}
					else {
						break;
					}
					hitTestRect.X += DropSize.Width;
					dropsTested += 1;
				}
				if (dropsTested == DropsPerRow)
				{
					dropsToRemove.AddRange(dropsFound);
				}

			} while (dropsToRemove.Count == 0 && hitTestRect.Y < Bounds.GetMinY());
			foreach (var drop in dropsToRemove)
			{
				dropBehavior.RemoveItem(drop);
				drop.RemoveFromSuperview();
			}
		}

		const int DropsPerRow = 10;
		CGSize DropSize => new CGSize(Bounds.Width / DropsPerRow, Bounds.Width / DropsPerRow);

		UIColor[] colors = new UIColor[] { UIColor.Blue, 
			UIColor.Yellow, UIColor.Green, 
			UIColor.Red, UIColor.Purple, UIColor.Orange,
			UIColor.Cyan, UIColor.Brown, UIColor.Magenta};

		public void AddDrop()
		{
			var frame = new CGRect(CGPoint.Empty, DropSize);
			frame.X = (System.Int32)(r.NextDouble() * DropsPerRow) * DropSize.Width;

			var drop = new UIView(frame);
			drop.BackgroundColor = colors[r.Next() % colors.Length];

			AddSubview(drop);

			dropBehavior.AddItem(drop);;
		}

	}
}
